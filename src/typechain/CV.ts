/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CVInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Subscribers"
      | "addVote"
      | "addtoken"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "distributeRewards"
      | "initDuration"
      | "lastupdated"
      | "name"
      | "owner"
      | "submitOption"
      | "subscribe"
      | "symbol"
      | "tokenWhitelist"
      | "totalSubscriptionAmount"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "OptionSubmitted"
      | "Subscribed"
      | "Transfer"
      | "Voted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "Subscribers",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addVote",
    values: [string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addtoken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastupdated",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitOption",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "subscribe", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSubscriptionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "Subscribers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addtoken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastupdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSubscriptionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OptionSubmittedEvent {
  export type InputTuple = [optionHash: BytesLike, owner: AddressLike];
  export type OutputTuple = [optionHash: string, owner: string];
  export interface OutputObject {
    optionHash: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscribedEvent {
  export type InputTuple = [tokenType: string, subscriber: AddressLike];
  export type OutputTuple = [tokenType: string, subscriber: string];
  export interface OutputObject {
    tokenType: string;
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    optionHash: BytesLike,
    voter: AddressLike,
    like: boolean
  ];
  export type OutputTuple = [optionHash: string, voter: string, like: boolean];
  export interface OutputObject {
    optionHash: string;
    voter: string;
    like: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CV extends BaseContract {
  connect(runner?: ContractRunner | null): CV;
  waitForDeployment(): Promise<this>;

  interface: CVInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Subscribers: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [[boolean, bigint] & { subscribe: boolean; lastSubscribe: bigint }],
    "view"
  >;

  addVote: TypedContractMethod<
    [tokenType: string, dataHash: BytesLike, _like: boolean],
    [void],
    "nonpayable"
  >;

  addtoken: TypedContractMethod<
    [tokenType: string, _add: boolean],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  distributeRewards: TypedContractMethod<
    [tokenType: string, dataHash: BytesLike],
    [void],
    "nonpayable"
  >;

  initDuration: TypedContractMethod<[], [void], "nonpayable">;

  lastupdated: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  submitOption: TypedContractMethod<
    [tokenType: string, _data: string],
    [string],
    "nonpayable"
  >;

  subscribe: TypedContractMethod<[tokenType: string], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenWhitelist: TypedContractMethod<[arg0: string], [boolean], "view">;

  totalSubscriptionAmount: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Subscribers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [[boolean, bigint] & { subscribe: boolean; lastSubscribe: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "addVote"
  ): TypedContractMethod<
    [tokenType: string, dataHash: BytesLike, _like: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addtoken"
  ): TypedContractMethod<
    [tokenType: string, _add: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<
    [tokenType: string, dataHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initDuration"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastupdated"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "submitOption"
  ): TypedContractMethod<
    [tokenType: string, _data: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<[tokenType: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenWhitelist"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalSubscriptionAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "OptionSubmitted"
  ): TypedContractEvent<
    OptionSubmittedEvent.InputTuple,
    OptionSubmittedEvent.OutputTuple,
    OptionSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "Subscribed"
  ): TypedContractEvent<
    SubscribedEvent.InputTuple,
    SubscribedEvent.OutputTuple,
    SubscribedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "OptionSubmitted(bytes32,address)": TypedContractEvent<
      OptionSubmittedEvent.InputTuple,
      OptionSubmittedEvent.OutputTuple,
      OptionSubmittedEvent.OutputObject
    >;
    OptionSubmitted: TypedContractEvent<
      OptionSubmittedEvent.InputTuple,
      OptionSubmittedEvent.OutputTuple,
      OptionSubmittedEvent.OutputObject
    >;

    "Subscribed(string,address)": TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;
    Subscribed: TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Voted(bytes32,address,bool)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
  };
}
